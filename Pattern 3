#Pattern 3
def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        min_length = 99999999999999

        start = 0
        end = 0
        curr_sum = 0

        while end < len(nums):

            curr_sum = curr_sum + nums[end]
            end = end+1

            while ( start < end ) and curr_sum >= target:
                curr_sum = curr_sum - nums[start]
                start = start + 1

                min_length = min(min_length,end-start+1)
        if min_length == 99999999999999:
            return 0
        else:
            return (min_length)

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
